% dependencies: 
% finite.elf 
% polynomial.elf
% (run with sources.cfg)


% inductive type (mu)
ind : (ty+ -> ty+) -> ty+.

% value form fold
fold : poly A -> value (A (ind A)) -> value (ind A).

% trans form rec
rec : {A : ty+ -> ty+}
    (value (A C) -> comp C)
    -> trans (ind A) C.

% eval for rec-fold
eval/rec/fold
  : eval
    (app
        (fold PolyA (V : value (A (ind A)))
            : value (ind A))
        (rec A ([x : value (A C)] R x : comp C)))
    VOut
  % generate output of map, then app V to it,
  % then subst the result into R,
  % and evaluate that.
  <- map PolyA (rec A R) 
    (Tr : trans (A (ind A)) (A C))
  <- eval (app V Tr) (V' : value (A C))
  <- eval (R V') (VOut : value C).

% can check totality for map now

%worlds () (map _ _ _).
%total P (map P _ _).


% and for eval?
%worlds () (eval _ _).
% %total C (eval C _).
% gets mad about termination violation,
% could fix it, don't wanna.

%% example time: nats!

%abbrev natp : (ty+ -> ty+)
  = ([a] tsum t1 a).
%abbrev nat : ty+
  = ind natp.
%abbrev bool : ty+
  = tsum t1 t1.
%abbrev true : value bool
  = inl unit.
%abbrev false : value bool
  = inr unit.

%abbrev natpoly : poly natp
  = poly/sum poly/const poly/id.

%abbrev n0 : value nat
  = fold natpoly (inl unit).

%abbrev n2 : value nat
  = fold natpoly (inr (fold natpoly (inr n0))).
%abbrev n3 : value nat
  = fold natpoly (inr n2).


%abbrev not : trans bool bool
  = case ([x] ret false) ([y] ret true).

%abbrev even : trans nat bool
  = rec natp
    ([x:value (natp bool)] app x
        (case ([u:value t1] ret true)
              ([b:value bool] app b not))).

%solve even_three
  : eval (app n3 even) Out.
% computes Out=false!

