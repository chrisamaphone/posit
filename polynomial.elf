% dependency: finite.elf (run with sources.cfg)

% polynomial maps (via PFPL ch14 on "generic programming")
% transformation that takes a polynomial over a type
% t, and maps a transformation over data structures
% with that shape.

map : {P : ty+ -> ty+} 
      trans A C
   -> trans (P A) (P C) -> type.
%mode map +P +T1 -T2.

% see poly1.elf for a version
% map : {P : ty+ -> ty+}
%       (value A -> value B)
%      %  -> (value (P A) -> value (P B))
%       -> value (P A) -> value (P B)
%        -> type.

map/id 
  : map ([t] t) T T.

map/const 
  : map ([t] A) (T : trans B C) id.

map/prod 
  : map ([t] tprod (P1 t) (P2 t)) 
    (T : trans A C) 
    (split [x] [y]
        (bind (app x T1)
          ([z] bind (app y T2)
            ([w] ret (pair z w)))))
  <- map P1 T (T1 : trans (P1 A) (P1 C))
  <- map P2 T (T2 : trans (P2 A) (P2 C)).

map/sum
  : map ([t] tsum (P1 t) (P2 t))
    (T : trans A C)
    (case 
        % branch 1: apply T1, then inl
        ([x:value (P1 A)] 
          bind (app x T1)
          ([z] ret (inl z)))
        % branch 2: apply T2, then inr
        ([y:value (P2 A)] 
          bind (app y T2)
          ([w] ret (inr w)))
    ) 
  <- map P1 T T1
  <- map P2 T T2.

%worlds () (map _ _ _).
%total P (map P _ _).


% can now add rectypes!
% eventually want to move the eval totality check
% later to extend.

% %worlds () (eval _ _).
% %total C (eval C _).


